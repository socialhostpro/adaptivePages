/**
 * @file Contains type definitions related to e-commerce, including products, categories, and shopping cart.
 */

/** The status of a product. */
export type ProductStatus = 'Active' | 'Draft' | 'Archived';
/** The fulfillment type for a product. */
export type FulfillmentType = 'Shippable' | 'Digital' | 'On-site Service' | 'VideoCourse';

/** Represents a single value for a product option, like 'Red' for 'Color'. */
export interface ProductOptionValue {
    value: string;
    priceModifier: number; // Can be positive or negative
}

/** Represents a product option, like 'Color' or 'Size'. */
export interface ProductOption {
    name: string;
    values: ProductOptionValue[];
}

/** Represents a product as generated by the AI, before it's saved to the database. */
export interface ProductItem {
    id?: string;
    name: string;
    description: string;
    price: number;
    status: ProductStatus;
    fulfillment_type: FulfillmentType;
    category: string; // This will be the full path name, e.g., "Clothing > Mens > Shirts"
    featured_image_url: string; // This is a prompt
    gallery_images: string[]; // Array of prompts
    options: ProductOption[];
}

/** Represents a product stored in and fetched from the database. */
export interface ManagedProduct {
    id: string; // UUID from DB
    user_id: string;
    created_at: string;
    name: string;
    description: string | null;
    price: number;
    status: ProductStatus;
    fulfillment_type: FulfillmentType;
    category_id: string | null; // The ID of the category from product_categories table
    category: string; // Populated via join for display purposes
    featured_image_url: string | null; // URL or prompt
    gallery_images: string[] | null; // Array of URLs or prompts
    options: ProductOption[] | null;
}

/** Represents a product category. */
export interface ProductCategory {
    id: string;
    user_id: string;
    name: string;
    created_at: string;
    parent_id: string | null;
    position: number;
    children?: ProductCategory[]; // For UI tree building
}

/** The pricing approval status for an item in a proofing request or order. */
export type PricingStatus = 'pending' | 'approved' | 'rejected' | 'skipped';

/** Represents an item within the shopping cart. */
export interface CartItem extends ManagedProduct {
    quantity: number;
    variantDescription?: string; // e.g., "Color: Red, Size: Large"
    finalPrice: number;
    pricingStatus?: PricingStatus;
}

/** Represents an order placed by a customer. */
export interface Order {
    pageId: string;
    bookingId?: string; // Link back to a booking if applicable
    customerInfo: {
        firstName: string;
        lastName: string;
        email: string;
        address?: string;
    };
    items: CartItem[];
    total: number;
    status: OrderStatus;
    // New fields for detailed order management
    paymentStatus?: 'Paid' | 'Pending' | 'Failed' | 'Refunded' | 'Partially Refunded';
    paymentMethod?: string;
    transactionId?: string;
    shippingInfo?: {
        method?: string;
        carrier?: string;
        trackingNumber?: string;
    };
    orderLog?: { timestamp: string; message: string; user?: string }[];
}

/** The status of an order. */
export type OrderStatus = 'New Order' | 'Processing' | 'Delivering' | 'Completed' | 'Canceled' | 'Refunded' | 'Pending Payment';

/** Represents an order as managed within the application dashboard. */
export interface ManagedOrder {
    id: string;
    pageId: string;
    pageName: string;
    createdAt: string;
    customer: {
        name: string;
        email: string;
        phone?: string;
        shippingAddress?: string;
    };
    items: CartItem[];
    total: number;
    status: OrderStatus;
    // New fields for detailed order management
    paymentStatus?: 'Paid' | 'Pending' | 'Failed' | 'Refunded' | 'Partially Refunded';
    paymentMethod?: string;
    transactionId?: string;
    shippingInfo?: {
        method?: string;
        carrier?: string;
        trackingNumber?: string;
    };
    orderLog?: { timestamp: string; message: string; user?: string }[];
}
